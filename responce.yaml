apiVersion: v1
kind: Pod
metadata:
  name: test-0
  generateName: test-
  namespace: default
  uid: 8c6d1727-c7dd-438d-8461-c1c317091b8f
  resourceVersion: '28700'
  creationTimestamp: '2023-04-17T11:43:03Z'
  labels:
    controller-revision-hash: test-6fbf8b785b
    notebook-name: test
    statefulset: test
    statefulset.kubernetes.io/pod-name: test-0
    type-app: notebook
  annotations:
    sidecar.istio.io/componentLogLevel: wasm:debug
    sidecar.istio.io/userVolume: '[{"name":"wasmfilters-dir","emptyDir": { } } ]'
    sidecar.istio.io/userVolumeMount: '[{"mountPath":"/var/local/lib/wasm-filters","name":"wasmfilters-dir"}]'
  ownerReferences:
    - apiVersion: apps/v1
      kind: StatefulSet
      name: test
      uid: c7ebfddf-7ee3-4f11-acec-46b09492cf95
      controller: true
      blockOwnerDeletion: true
  managedFields:
    - manager: kube-controller-manager
      operation: Update
      apiVersion: v1
      time: '2023-04-17T11:43:03Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:sidecar.istio.io/componentLogLevel: {}
            f:sidecar.istio.io/userVolume: {}
            f:sidecar.istio.io/userVolumeMount: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:notebook-name: {}
            f:statefulset: {}
            f:statefulset.kubernetes.io/pod-name: {}
            f:type-app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c7ebfddf-7ee3-4f11-acec-46b09492cf95"}: {}
        f:spec:
          f:containers:
            k:{"name":"test"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8888,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostname: {}
          f:initContainers:
            .: {}
            k:{"name":"mlflow-tracking-webassembly"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/local/lib/wasm-filters"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"wasmfilters-dir"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
    - manager: kubelet
      operation: Update
      apiVersion: v1
      time: '2023-04-17T11:43:41Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.50"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      subresource: status
  selfLink: /api/v1/namespaces/default/pods/test-0
status:
  phase: Pending
  conditions:
    - type: Initialized
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2023-04-17T11:43:03Z'
      reason: ContainersNotInitialized
      message: 'containers with incomplete status: [mlflow-tracking-webassembly]'
    - type: Ready
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2023-04-17T11:43:03Z'
      reason: ContainersNotReady
      message: 'containers with unready status: [test]'
    - type: ContainersReady
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2023-04-17T11:43:03Z'
      reason: ContainersNotReady
      message: 'containers with unready status: [test]'
    - type: PodScheduled
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2023-04-17T11:43:03Z'
  hostIP: 172.19.0.2
  podIP: 10.244.0.50
  podIPs:
    - ip: 10.244.0.50
  startTime: '2023-04-17T11:43:03Z'
  initContainerStatuses:
    - name: mlflow-tracking-webassembly
      state:
        waiting:
          reason: ErrImagePull
          message: >-
            rpc error: code = Unknown desc = failed to pull and unpack image
            "registry.neomsa.ru/docker-mlops/mlops/webassembly:release-1.0.0":
            failed to resolve reference
            "registry.neomsa.ru/docker-mlops/mlops/webassembly:release-1.0.0":
            failed to do request: Head
            "https://registry.neomsa.ru/v2/docker-mlops/mlops/webassembly/manifests/release-1.0.0":
            dial tcp 172.19.11.85:443: connect: no route to host
      lastState: {}
      ready: false
      restartCount: 0
      image: registry.neomsa.ru/docker-mlops/mlops/webassembly:release-1.0.0
      imageID: ''
  containerStatuses:
    - name: test
      state:
        waiting:
          reason: PodInitializing
      lastState: {}
      ready: false
      restartCount: 0
      image: nginx
      imageID: ''
      started: false
  qosClass: BestEffort
spec:
  volumes:
    - name: wasmfilters-dir
      emptyDir: {}
    - name: kube-api-access-kqwsm
      projected:
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
        defaultMode: 420
  initContainers:
    - name: mlflow-tracking-webassembly
      image: registry.neomsa.ru/docker-mlops/mlops/webassembly:release-1.0.0
      command:
        - sh
        - '-c'
        - cp /plugin.wasm /var/local/lib/wasm-filters/oidc.wasm
      resources: {}
      volumeMounts:
        - name: wasmfilters-dir
          mountPath: /var/local/lib/wasm-filters
        - name: kube-api-access-kqwsm
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  containers:
    - name: test
      image: nginx
      ports:
        - name: notebook-port
          containerPort: 8888
          protocol: TCP
      envFrom:
        - secretRef:
            name: secret
      resources: {}
      volumeMounts:
        - name: kube-api-access-kqwsm
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      lifecycle:
        postStart:
          exec:
            command:
              - /bin/sh
              - '-c'
              - ls -la
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: Always
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  nodeName: kind-control-plane
  securityContext: {}
  hostname: test-0
  schedulerName: default-scheduler
  tolerations:
    - key: node.kubernetes.io/not-ready
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
    - key: node.kubernetes.io/unreachable
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
  priority: 0
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
